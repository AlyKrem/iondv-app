#!/bin/bash


if ! [ $1 ] ; then
  echo 'Usage: iondv-app [OPTION]... IONDV_APP_NAME_OR_GIT_URL'
  echo 'Install IONDV. Framework application to current dirrectory and create docker image.'
  echo
  echo 'Options:'
  echo '  -d                          stop, remove runnig app docker container and image,'
  echo '                              create and run new once'
  echo '  -l [value]                  mongodb docker name, for link with app docker container'
  echo '                              (also set mongo uri value to [value]:27017)'
  echo '  -k                          skip check'
  echo '  -s [value]                  script to run after install and before build app'
  echo '  -m [value]                  mongo uri, for example: mongodb:27017. Default localhost:27017'
  echo
  echo 'Example:'
  echo '  ./iondv-app -d -l mongodb khs-ticket-dicsount'
  echo '  ./iondv-app -m localhost:27017 https://git.iondv.ru/ION-METADATA/khv-svyaz-info.git'
  exit
fi


#Default value
mongodbUri="localhost:27017"

gitFramework=https://git.iondv.ru/ION/platform.git
gitModules=https://git.iondv.ru/ION-MODULES
gitApp=https://git.iondv.ru/ION-APP
gitAppExt=https://git.iondv.ru/ION-METADATA

# Process param
while [ -n "$1" ]
do
case "$1" in
  -d) dockerUse=1; echo "Found the docker option";;
  -k) skipCheck=1; echo "Found the skip check option";;
  -l) mongoLink="$2"; echo "Found the docker mongo link option"
  shift ;;
  -m) mongodbUri="$2"; echo "Found the mongodb option"
  shift ;;
  -s) postInstScript="$2"; echo "Found the script option"
  shift ;;
  *) if [[ ${1:0:1} == "-" ]] ; then 
    echo "$1 is not an option" 
    shift
  else 
    appName="$1"
  fi;;
  esac
shift
done

checkUrl=`echo $appName  | grep "^http"`
if [ $? -eq 0 ]; then
  appGitLink=$appName
  appName=`echo $appName | grep -Po "[\-\w]+\.git" | sed 's/.git//'`
fi

if [ $mongoLink ] ; then
  mongodbUri="$mongoLink:27017"
  echo "Set mongo uri to $mongodbUri"
fi

# Check
if ! [ $skipCheck ] ; then 
  # Check git
  echo 'Check environment: git, mongo, node, npm, node-gyp, gulp, bower'
  git --version > /dev/null
  if [ $? -ne 0 ]; then
    echo "Error check git"
    exit
  fi
  # Check mongonpm -g list node-gyp gulp bower
  if [ $mongoLink ] ; then
    docker exec -it $mongoLink mongo --quiet --eval 'db.runCommand("ping").ok' > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check MongoDb docker container: $mongoLink"
      exit
    fi
  else
    checkMongo=`curl --silent $mongodbUri | grep "MongoDB"` > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check MongoDb: $mongodbUri"
    fi
  fi
  # Check npm
  #  TODO Проверка установки -g node-gyp, gulp
  nodeCheck=`node --version`
  if [ $? -ne 0 ]; then
    echo "Error check node"
    exit
  fi
  npmCheck=`npm --version`
  if [ $? -ne 0 ]; then
    echo "Error check npm "
    exit
  fi
  npmPackCheck=`npm -g list node-gyp gulp bower`
  if [ $? -ne 0 ]; then
    echo "Error check npm packages list"
    exit
  fi
  echo $npmPackCheck | grep 'node-gyp'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check node-gyp. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g node-gyp;;
      n|N ) echo "node-gyp is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'gulp@4.'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check ^gulp@4.0.0. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g gulp;;
      n|N ) echo "^gulp@4.0.0 is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'bower'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check bower. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g bower;;
      n|N ) echo "bower is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo 'Success.'
fi

dockerName=$appName
imageName=$dockerName
dbName=$appName
installDir=`pwd`

frameworkPath=$installDir/$dockerName

echo "Insalling app:          $appName"
echo "  workspace dir:        $installDir"
echo "  framework path:       $frameworkPath"
if [ $dockerUse ] ; then echo "  create docker image:  $imageName"; echo "  run docker name:      $dockerName"; fi
if [ $postInstScript ] ; then echo "  postinstall script:   $postInstScript"; fi

if ! [ -d $frameworkPath ]; then
  echo "Git: clone IONDV. framework"
  git clone --quiet "$gitFramework" "$appName"
else
  cd $frameworkPath
  echo "Git: Stash and update IONDV. framework"
  git stash
  git pull
fi

if ! [ -d "$frameworkPath/applications" ]; then 
  mkdir "$frameworkPath/applications" 
fi

if [ -d "$frameworkPath/applications/$appName" ]; then
  imageVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  echo "Current app version: $imageVer"
  echo "Git: stash and update IONDV. app - $appName"
  git stash
  git pull
else
  cd "$frameworkPath/applications"
  echo "Git: clone IONDV. app - $appName"
  if [ $appGitLink ] ; then
    git clone --quiet "$appGitLink"
  else
    git clone --quiet "$gitApp/$appName.git" 
  fi
  imageVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  echo "Current app version: $imageVer"
fi

if [ $dockerUse ] ; then  
  echo "Will be stop container and remove $dockerName, remove docker image: $imageName:latest and $imageName:$imageVer"
  echo "Also will be drop db: $dbName"
  read -p "Continue (y/n)?" choice
  case "$choice" in 
    y|Y ) 
      docker stop $dockerName
      docker rm $dockerName
      docker image rmi $imageName:latest
      docker image rmi $imageName:$imageVer
      docker exec -it $mongoLink mongo $dbName --quiet --eval "db.dropDatabase();";;
    n|N );;
    * ) echo "invalid";;
  esac
fi

# package.json dependencies 
# Check empty ionMetaDependencies
grep '"ionMetaDependencies"\s*:\s*{' $frameworkPath/applications/$appName/package.json > /dev/null
if [ $? -eq 0 ]; then 
grep '"ionMetaDependencies"\s*:\s*{[\s\n]*}' $frameworkPath/applications/$appName/package.json > /dev/null
fi
if [ $? -ne 0 ]; then
  apps=`sed -n -r '/"ionMetaDependencies":\s+\{/,/\}/{ /"ionMetaDependencies":\s+\{/d; /}/d; p; }' $frameworkPath/applications/$appName/package.json`
  if ! [ ${#apps[@]} = 0 ] ; then 
    echo Addition apps list: $apps
    applist=`echo $apps | tr -d [:space:] | tr -d '"' | tr ',' '\n'`

    for i in ${applist[@]}
    do
      echo "Inslall ext-app: $i"
      IFS=':' tmp=($i)
      if ! [ -d "$frameworkPath/applications/${tmp[0]}" ]; then
        cd $frameworkPath/applications
        git clone --quiet "$gitAppExt/${tmp[0]}.git"
      fi
      cd "$frameworkPath/applications/${tmp[0]}"
      git stash
      git pull
      git checkout tags/${tmp[1]}
    done
  fi
fi

if ! [ -d $frameworkPath/modules ]; then 
  mkdir $frameworkPath/modules 
fi

# Check empty ionModulesDependencies
grep '"ionModulesDependencies"\s*:\s*{' $frameworkPath/applications/$appName/package.json > /dev/null
if [ $? -eq 0 ]; then 
grep '"ionModulesDependencies"\s*:\s*{[\s\n]*}' $frameworkPath/applications/$appName/package.json > /dev/null
fi
if [ $? -ne 0 ]; then
  modules=`sed -n -r '/"ionModulesDependencies":\s+\{/,/\}/{ /"ionModulesDependencies":\s+\{/d; /}/d; p; }' $frameworkPath/applications/$appName/package.json`
  echo Modules list: $modules
  if ! [ ${#modules[@]} = 0 ] ; then
    modlist=`echo $modules | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
    for i in ${modlist[@]}
    do
      echo "Inslall module: $i"
      IFS=':' tmp=($i)
      if ! [ -d "$frameworkPath/modules/${tmp[0]}" ]; then
        cd $frameworkPath/modules
        echo `pwd`
        echo $gitModules/${tmp[0]}.git
        git clone --quiet "$gitModules/${tmp[0]}.git"
      fi
      cd "$frameworkPath/modules/${tmp[0]}"
      git stash
      git pull
      git checkout tags/${tmp[1]}
    done
  fi
fi

echo Build IONDV application: $appName
cd $frameworkPath
export NODE_PATH=$frameworkPath

echo "auth.denyTop=false" > "$frameworkPath/config/setup.ini"
echo "auth.registration=false" >> "$frameworkPath//config/setup.ini"
echo "db.uri=mongodb://$mongodbUri/$appName" >> "$frameworkPath/config/setup.ini"
echo "server.ports[]=8888" >> "$frameworkPath/config/setup.ini"
echo "module.default=registry" >> "$frameworkPath/config/setup.ini"
echo "fs.storageRoot=./files" >> "$frameworkPath/config/setup.ini"
echo "fs.urlBase=/files" >> "$frameworkPath/config/setup.ini"
echo "deploy.mode=db" >> "$frameworkPath/config/setup.ini"

if [ $dockerUse ] ; then
  echo "FROM node:8" > "$frameworkPath/Dockerfile"
  echo "WORKDIR /var/www" >> "$frameworkPath/Dockerfile"
  echo "COPY . ." >> "$frameworkPath/Dockerfile"
  echo "EXPOSE 8888" >> "$frameworkPath/Dockerfile"
  echo "ENV NODE_PATH /var/www" >> "$frameworkPath/Dockerfile"
  echo "CMD [\"bash\", \"init.sh\"]" >> "$frameworkPath/Dockerfile"

  echo "node bin/import --src ./applications/$appName --ns $appName" > "$frameworkPath/init.sh"
  echo "node bin/import-data --src ./applications/$appName --ns $appName" >> "$frameworkPath/init.sh"
  echo "node bin/setup develop-and-test --reset" >> "$frameworkPath/init.sh"
  echo "node bin/setup viewlib" >> "$frameworkPath/init.sh"
  echo "node bin/adduser --name demo --pwd ion-demo" >> "$frameworkPath/init.sh"
  echo "node bin/acl --u demo@local --role admin --p full" >> "$frameworkPath/init.sh"
  echo "node bin/www" >> "$frameworkPath/init.sh"

  echo "**/.eslintrc.yml" > "$frameworkPath/.dockerignore"
  echo -e ".eslinignore\n.editorconfig\n.tern-project" >> "$frameworkPath/.dockerignore"
  echo -e ".gitignore\n.git/**\n**/.git/**" >> "$frameworkPath/.dockerignore"
  echo -e ".npmignore\n**/package-lock.json" >> "$frameworkPath/.dockerignore"
  echo -e "/config/config.json.devel\n/config/config.json.prod\n/config/setup.ini.example" >> "$frameworkPath/.dockerignore"
  echo -e "/docs/**\n**/docs/**\n/changelog*" >> "$frameworkPath/.dockerignore"
  echo -e "/log/**\n/test/**" >> "$frameworkPath/.dockerignore"
  echo -e "/view/default/vendor" >> "$frameworkPath/.dockerignore"
  echo -e "/view/default/node_modules" >> "$frameworkPath/.dockerignore"
  echo -e "/modules/*/view/default/vendor/**" >> "$frameworkPath/.dockerignore"
  echo -e "/modules/*/view/default/node_modules/**" >> "$frameworkPath/.dockerignore"
  echo -e "/applications/*/themes/*/vendor/**" >> "$frameworkPath/.dockerignore"
  echo -e "/applications/*/themes/*/node_modules/**" >> "$frameworkPath/.dockerignore"
fi


if [ $postInstScript] ; then
  $postInstScript
fi

#npm -no-package-lock install gulp@"^4.0.0" gulp-clean-css@"~4.0.0" gulp-jsmin@"~0.1.5" gulp-less@"~4.0.1" gulp-rename@"~1.4.0"
npm install

gulp build
if [ $? -ne 0 ]; then
  echo "Build error. Exit"
  exit
fi

rm -r -f node_modules

echo 'Install npm production'
npm ci --only=production


if ! [ $dockerUse ] ; then
  node bin/import --src ./applications/$appName --ns $appName
  node bin/setup $appName --reset
  node bin/import-data --src ./applications/$appName/data --ns $appName
  node bin/adduser --name admin --pwd 123
  node bin/acl --u admin@local --role admin --p full
  echo "Add test user. Login: admin, password: 123"
  node bin/www
else
  imageVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  echo Build docker version: $imageVer
  cd $frameworkPath
  docker image build -t $imageName:$imageVer .
  cd ..
  docker tag $imageName:$imageVer $imageName:latest

  if [ $mongoLink ] ; then
    docker run -d -p 8888:8888 --name $dockerName --link $mongoLink $imageName
  else   # TODO для докера нужен какой-то проброс портов на host. И параметр - запускать или нет.
    docker run -d -p 80:8888 --name $dockerName $imageName 
  fi
  sleep 30
  curl localhost:8888 # TODO проверка результата
  read -p "Save docker container to file (y/n)?" choice
  case "$choice" in
    y|Y ) 
      docker save $imageName:latest -o $dockerName.docker-image.tar;;
    n|N );;
    * ) echo "invalid";;
  esac  
fi

cd $installDir