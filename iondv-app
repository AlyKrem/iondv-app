#!/bin/bash

# TODO Build in docker only, without use local Node.js

# TODO method git, zip, npm

if ! [ $1 ] ; then
  echo 'Usage: iondv-app [OPTION]... IONDV_APP_NAME|IONDV_APP_NAME@VERSION|GIT_URL'
  echo 'Install IONDV. Framework application to current dirrectory and create docker image.'
  echo
  echo 'Options:'
  echo 'Build app method option:'
  echo ' -t [value]             git: use git clone (default)'
#  echo '                              zip: get from zip-files from github only [in construction]'
#  echo '                              npm: get from npm [in construction]'
  echo '                              docker:  without use specific software on host mashine, only docker image'
  echo  'Universal options'
  echo '  -c [value]                  start cluster with [value] count'
  echo '  -m [value]                  mongo uri, for example: mongodb:27017. Default localhost:27017'
  echo '  -r                          remove app workspace folder, if they exist'
  echo '  -i                          import data'
  echo '  -a                          import acl (role and user)'
  echo '  -y                          yes to all'
  echo '  -q                          quiet mode. Show only major and warn information'
  echo '  -l [value]                  mongodb docker name, for link with app docker container'
  echo '                              (with option -d or docker method)'
  echo '                              also set mongo uri value to [value]:27017'
  echo '  -p [value]                  workspace path, where will created app folder'
  echo '  -s [value]                  full path to script, go running after install and before build app'
  echo '  -n [value]                  new app namespace and name'
  echo '  -h                          skip checkout to version in tag. Use default (last) version'
  echo 'Options for git, zip, npm method:'
  echo '  -d                          stop, remove runnig app docker container and image,'
  echo '                              build for local deploy (git build method)'
  echo '  -k                          skip environment check'
  echo 'Options for docker method (ci):'
  echo '  -v                          save provisional docker image as template version, for example registry:3.0.0'
  echo '                              (for create cached version of components'
  echo
  echo 'Environment:'
  echo '  IONDVUrlGitFramework       URL for get framework, default: https://github.com/iondv/framework.git'
  echo '                             You can also set login and password for use in private repositry, for example'
  echo '                             https://login:password@git.company-name.com/iondv/framework.git'
  echo '  IONDVUrlGitModules         Base of URL for get modules, default https://github.com/iondv'
  echo '  IONDVUrlGitApp             Base of URL for get app, default https://github.com/iondv'
  echo '  IONDVUrlGitExtApp          Base of URL for get app extension, default https://github.com/iondv'

  echo
  echo 'Example:'
  echo '  ./iondv-app --method docker -l mongodb khs-ticket-discount@1.0.1'
  echo '  ./iondv-app -m localhost:27017 https://github.com/akumidv/svyaz-info.git'
  exit
fi

##################################
# Check function                 #
##################################
function f_check_node() {
  local nodeCheck=`node --version`
  if [ $? -ne 0 ]; then
    echo "Error check node"
    exit
  fi
  local nodeVersion=`echo $nodeCheck | grep -Po "^v\d+" |  grep -Po "\d+"`

  if [[ $nodeVersion -lt 8 || $nodeVersion -gt 10  ]]; then
    echo "Node major version: $nodeVersion is incompatible. Supported node version between 8.x.x and 10.x.x "
    exit
  elif ! [ $quietMode ] ; then echo "Node major version: $nodeVersion";
  fi
  local npmCheck=`npm --version`
  if [ $? -ne 0 ]; then
    echo "Error check npm "
    exit
  fi
}

function f_check_bash() {
  local bashVer=`bash --version`
  local regexp='^GNU bash, version ([0-9]+)\.'
  if [[ $bashVer =~ $regexp ]] ; then
    if [ ${BASH_REMATCH[1]} -lt 3 ] ; then
      echo "Bash version less 3. Need 3 or hignter"
      exit
      fi
  else
    echo "Didn't check bash version. Need 3 or hignter"
  fi
}

function f_check_git() {
  if ! [ $quietMode ] ; then echo 'Check environment: git, mongo, node, npm, node-gyp, gulp, bower'; fi
    git --version > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check git"
      exit
  fi
}
function f_check_npm_dep() {
  local npmPackCheck=`npm -g list node-gyp gulp bower`
  if [ $? -ne 0 ]; then
    echo "Error check npm packages list"
    exit
  fi
  echo $npmPackCheck | grep 'node-gyp'  > /dev/null
  if [ $? -ne 0 ]; then
    if [ $yesToAll ] ; then
      choice="y"
    else
      read -p "Error check node-gyp. Install (y/n)?" choice
    fi
    case "$choice" in
      y|Y ) npm install -g node-gyp;;
      n|N ) echo "node-gyp is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'gulp@4.'  > /dev/null
  if [ $? -ne 0 ]; then
    if [ $yesToAll ] ; then
      choice="y"
    else
      read -p "Error check ^gulp@4.0.0. Install (y/n)?" choice
    fi
    case "$choice" in
      y|Y ) npm install -g gulp;;
      n|N ) echo "^gulp@4.0.0 is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'bower'  > /dev/null
  if [ $? -ne 0 ]; then
    if [ $yesToAll ] ; then
      choice="y"
    else
      read -p "Error check bower. Install (y/n)?" choice
    fi
    case "$choice" in
      y|Y ) npm install -g bower;;
      n|N ) echo "bower is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
}

function f_check_mongo () {
  if [ $mongoLink ] ; then
    docker exec -it $mongoLink mongo --quiet --eval 'db.runCommand("ping").ok' > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check MongoDb docker container: $mongoLink"
      exit
    else
      checkMongo=`curl --silent $mongodbUri | grep "MongoDB"` > /dev/null
      if [ $? -ne 0 ]; then
        echo "Error check MongoDb: $mongodbUri"
      fi
    fi
 fi
}

####################################
# Version                          #
####################################
function f_get_framework_ver() {
  packagePath=$1
  local IFS_def=$IFS
  if grep -Eq '"engines"\s*:\s*{' $packagePath && ! grep -Eq '"engines"\s*:\s*{[\s\n]*}' $packagePath; then
    engines=`sed -n -r '/"engines":\s+\{/,/\}/{ /"engines":\s+\{/d; /}/d; p; }' $packagePath`
    if ! [ ${#engines[@]} = 0 ] ; then
      if ! [ $quietMode ] ; then echo "Engine list: $engines"; fi
      enginelist=`echo $engines | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
      for i in ${enginelist[@]}
      do
        IFS=':' tmp=($i)
        if [ ${tmp[0]} = "ion" ]; then
          frameworkVer=${tmp[1]}
        fi
        IFS=$IFS_def
      done
    fi
  fi
}

function f_get_metadep_ver() {
  appPackagePath=$1
  if grep -q '"ionMetaDependencies"\s*:\s*{' $appPackagePath && ! grep -q '"ionMetaDependencies"\s*:\s*{[\s\n]*}' $appPackagePath; then
    local metadepAll=`sed -n -r '/"ionMetaDependencies":\s+\{/,/\}/{ /"ionMetaDependencies":\s+\{/d; /}/d; p; }' $appPackagePath`
    if ! [ $quietMode ] ; then echo "Addition apps list: $metadepAll"; fi
    if ! [ ${#metadepAll[@]} = 0 ] ; then
      metadepPairList=`echo $metadepAll | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
    fi
  fi
}
#  if grep -Eq '"ionModulesDependencies"\s*:\s*{' $frameworkPath/package.json && ! grep -Eq '"ionModulesDependencies"\s*:\s*{[\s\n]*}' $frameworkPath/package.json; then
#    modules=`sed -n -r '/"ionModulesDependencies":\s+\{/,/\}/{ /"ionModulesDependencies":\s+\{/d; /}/d; p; }' $frameworkPath/package.json`
function f_get_modulesdep_ver() {
  appPackagePath=$1
  if grep -Eq '"ionModulesDependencies"\s*:\s*{' $appPackagePath && ! grep -Eq '"ionModulesDependencies"\s*:\s*{[\s\n]*}' $appPackagePath; then
    local modulesdepAll=`sed -n -r '/"ionModulesDependencies":\s+\{/,/\}/{ /"ionModulesDependencies":\s+\{/d; /}/d; p; }' $appPackagePath`
    if ! [ $quietMode ] ; then echo "Modules list: $modulesdepAll"; fi
    if ! [ ${#modulesdepAll[@]} = 0 ] ; then
      modulesDepPairList=`echo $modulesdepAll | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
    fi
  fi
}

function f_save_package_to_host () {
  docker run --rm --entrypoint="" "$1" cat "$2/package.json" > "$3"
}

##################################
# Build docker                   #
##################################

function f_git_set_dockerfile() {
  local gitDockerName=${1%:*}
  local gitDockerVer=${1##*:}
  local destPath=$2
  if [ ${3##*.} = "git" ]; then local gitUrl=$3; else local gitUrl="$3/$gitDockerName.git"; fi
  if [ $4 ]; then local folderName=$4; else local folderName=$gitDockerName; fi
  if ! [ $quietMode ] ; then echo "Build git docker $gitDockerName:$gitDockerVer from $gitUrl"; fi
  if [ $dockerVersionSave ]; then
    local postfix="-git-$gitDockerName"
    echo "FROM alpine/git as iondv-git-$gitDockerName"                                        > "$frameworkPath/Dockerfile$postfix"
  else
    local postfix=""
    echo "FROM alpine/git as iondv-$gitDockerName"                                            >> "$frameworkPath/Dockerfile$postfix"
  fi
  echo "WORKDIR $destPath"                                                                    >> "$frameworkPath/Dockerfile$postfix"
  if ! [ $skipTagMode ] ; then
    echo "LABEL version=\"$gitDockerVer\""                                                    >> "$frameworkPath/Dockerfile$postfix"
  fi
  echo "RUN git clone --quiet \"$gitUrl\" $folderName"                                        >> "$frameworkPath/Dockerfile$postfix"
  if ! [ $skipTagMode ] && ! [ "$gitDockerVer"="latest" ] ; then
  echo $gitDockerVer
      echo "WORKDIR $destPath/$folderName"                                                    >> "$frameworkPath/Dockerfile$postfix"
      echo "RUN git checkout \"tags/$gitDockerVer\""                                          >> "$frameworkPath/Dockerfile$postfix"
  fi
}


f_check_readiness_docker() {
  docker images | grep "${1%:*}\s*${1##*:}"
  return $?
}

function f_buld_docker_version() {
  if [ -z $4 ] && f_check_readiness_docker "$1" ; then echo "Docker $1 is exist, skip building"; return;
  else
    docker image build -t "$1" -f "$2" "$3"
  fi
  # TODO GET VERSION AND COPY AND SET IN NEW ONE DOCKER - SMALLEST AND VERIFED VERSION
  # TODO check rezult version from package.json, after build docker (copy to host) and set it in new docker, when will build by copy from git vesion?
}

##################################
# Create ini and build files      #
##################################
function f_create_setup_ini() {
  configPath="$1"
  echo "auth.denyTop=false"                                                                   > "$frameworkPath$configPath/setup.ini"
  echo "auth.registration=false"                                                              >> "$frameworkPath$configPath/setup.ini"
  echo "db.uri=mongodb://$mongodbUri/$appName"                                                >> "$frameworkPath$configPath/setup.ini"
  echo "server.ports[]=8888"                                                                  >> "$frameworkPath$configPath/setup.ini"
  echo "module.default=registry"                                                              >> "$frameworkPath$configPath/setup.ini"
  echo "fs.storageRoot=./files"                                                               >> "$frameworkPath$configPath/setup.ini"
  echo "fs.urlBase=/files"                                                                    >> "$frameworkPath$configPath/setup.ini"
  echo "deploy.mode=db"                                                                       >> "$frameworkPath$configPath/setup.ini"
}

function f_create_init_sh() {
  echo "node bin/import --src ./applications/$appName --ns $appName"                          > "$frameworkPath/init.sh"
  echo "node bin/setup $appName --reset"                                                      >> "$frameworkPath/init.sh"
  for i in ${applist[@]}
  do
    IFS=':' tmp=($i)
    if ! [ -d "$frameworkPath/applications/${tmp[0]}" ]; then
      echo "node bin/setup ${tmp[0]}"                                                         >> "$frameworkPath/init.sh"
    fi
  done
  if [ $importData ] ; then echo "node bin/import-data --src ./applications/$appName/data --ns $appName" >> "$frameworkPath/init.sh"; fi
  echo "node bin/adduser --name demo --pwd ion-demo"                                          >> "$frameworkPath/init.sh"
  echo "node bin/acl --u demo@local --role admin --p full"                                    >> "$frameworkPath/init.sh"
  if [ $importAcl ] ; then echo "node bin/acl --d ./applications/$appName/acl"                >> "$frameworkPath/init.sh"; fi
  if [ $startCluster ] ; then
    echo "export WORKER_COUNT=$startCluster"                                                  >> "$frameworkPath/init.sh"
    echo "exec node bin/cluster"                                                                   >> "$frameworkPath/init.sh"
  else
    echo "exec node bin/www"                                                                       >> "$frameworkPath/init.sh"
  fi
}

function  f_dockerignore() {
  echo "**/.eslintrc.yml"                                                                     > "$frameworkPath/.dockerignore"
  echo ".eslinignore\n.editorconfig\n.tern-project"                                           >> "$frameworkPath/.dockerignore"
  echo ".gitignore\n.git/**\n**/.git/**"                                                      >> "$frameworkPath/.dockerignore"
  echo ".npmignore\n**/package-lock.json"                                                     >> "$frameworkPath/.dockerignore"
  echo "/config/config.json.devel\n/config/config.json.prod\n/config/setup.ini.example"       >> "$frameworkPath/.dockerignore"
  echo "/docs/**\n**/docs/**\n/changelog*"                                                    >> "$frameworkPath/.dockerignore"
  echo "/log/**\n/test/**"                                                                    >> "$frameworkPath/.dockerignore"
  echo "/view/default/vendor"                                                                 >> "$frameworkPath/.dockerignore"
  echo "/view/default/node_modules"                                                           >> "$frameworkPath/.dockerignore"
  echo "/modules/*/view/default/vendor/**"                                                    >> "$frameworkPath/.dockerignore"
  echo "/modules/*/view/default/node_modules/**"                                              >> "$frameworkPath/.dockerignore"
  echo "/applications/*/themes/*/vendor/**"                                                   >> "$frameworkPath/.dockerignore"
  echo "/applications/*/themes/*/node_modules/**"                                             >> "$frameworkPath/.dockerignore"
  echo "./Dockerfile"                                                                         >> "$frameworkPath/.dockerignore"
}

function f_build_docker() {
  if ! [ $appGetVersion ] ; then appGetVersion="latest"; fi
  imageName="iondv-$appName:$appGetVersion"
  f_git_set_dockerfile "$appName:$appGetVersion" "/var/www/applications" $appGitLink
  if [ $newAppName ] ; then
    cp $scriptPath/change-namespace.sh $frameworkPath/change-namespace.sh
    echo "COPY ./change-namespace.sh /var/www/applications/change-namespace.sh"               >> "$frameworkPath/Dockerfile-git-$appName"
    echo "RUN sh /var/www/applications/change-namespace.sh $quietMode /var/www/applications/$appName $prevAppName $newAppName" \
                                                                                              >> "$frameworkPath/Dockerfile-git-$appName"
    echo "RUN rm -f /var/www/applications/change-namespace.sh"                                >> "$frameworkPath/Dockerfile-git-$appName"
  fi
  f_buld_docker_version "iondv-git-$appName:$appGetVersion" "$frameworkPath/Dockerfile-git-$appName" "$frameworkPath/."
  f_save_package_to_host "iondv-git-$appName:$appGetVersion" "/var/www/applications/$appName" "$frameworkPath/package-$appName.json"

  # Build framework docker image
  f_get_framework_ver $frameworkPath/package-$appName.json
  if ! [ $frameworkVer ]; then frameworkVer="latest"; fi
  f_git_set_dockerfile "framework:$frameworkVer" "/var" $IONDVUrlGitFramework "www"
  if [ $dockerVersionSave ]; then f_buld_docker_version "iondv-git-framework:$frameworkVer" "$frameworkPath/Dockerfile-git-framework" "$frameworkPath/."; fi

  # ionMetaDependencies
  f_get_metadep_ver $frameworkPath/package-$appName.json
  for temp in ${metadepPairList[@]}; do
    f_git_set_dockerfile $temp "/var/www/applications" $IONDVUrlGitExtApp
    if [ $dockerVersionSave ]; then f_buld_docker_version "iondv-git-$temp" "$frameworkPath/Dockerfile-git-${temp%:*}" "$frameworkPath/."; fi
  done

  # ionModulesDependencies
  f_get_modulesdep_ver $frameworkPath/package-$appName.json
  for temp in ${modulesDepPairList[@]}; do
    f_git_set_dockerfile $temp "/var/www/modules" $IONDVUrlGitModules
    if [ $dockerVersionSave ]; then f_buld_docker_version "iondv-git-$temp" "$frameworkPath/Dockerfile-git-${temp%:*}" "$frameworkPath/."; fi
  done



  if ! f_check_readiness_docker "$imageName"; then
    echo "FROM node:10 as iondv-base-$appName"                                                >  "$frameworkPath/Dockerfile"


# TODO DIDN'T WORk. PYTHON NEED for node-gyp, git for bower, vips for sharp http://sharp.pixelplumbing.com/en/stable/install/ - plus 380Mb
# Different size is 400M
# Error in compyle and after start
#    echo "FROM node:10-alpine as iondv-base-$appName"                                         >  "$frameworkPath/Dockerfile"
#    echo "RUN  apk add --no-cache python make g++ \
#         && apk --update add git less openssh && \
#         && apk add vips-dev fftw-dev build-base \
#            --update-cache \
#            --repository https://alpine.global.ssl.fastly.net/alpine/edge/community \
#            --repository https://alpine.global.ssl.fastly.net/alpine/edge/main \
#
#    rm -rf /var/lib/apt/lists/* && \
#    rm -fR /var/cache/apk/*"                                                                  >> "$frameworkPath/Dockerfile"
    echo "RUN npm install -g node-gyp gulp bower"                                             >> "$frameworkPath/Dockerfile"
    echo "WORKDIR /var/www"                                                                   >> "$frameworkPath/Dockerfile"
    if ! [ $skipTagMode ] ; then
      echo "LABEL version=\"$appGetVersion\""                                                  >> "$frameworkPath/Dockerfile"
    fi
    echo "COPY --from=iondv-git-framework:$frameworkVer /var/www ."                           >> "$frameworkPath/Dockerfile"
    echo "COPY ./init.sh /var/www/init.sh"                                                    >> "$frameworkPath/Dockerfile"
    echo "COPY ./setup.ini /var/www/config/setup.ini"                                         >> "$frameworkPath/Dockerfile"
    #TODO dev только? Т.к. иначе размер докера 2.6 гб после удаления node-modules??? или как уменьшить? не кешировать при создании докер-контейнреа????
    echo "RUN npm install"                                                                    >> "$frameworkPath/Dockerfile" # TODO NPM install gulp
    echo "WORKDIR /var/www/applications"                                                      >> "$frameworkPath/Dockerfile"
    echo "COPY --from=iondv-git-$appName:$appGetVersion /var/www/applications ."              >> "$frameworkPath/Dockerfile"
    for temp in ${metadepPairList[@]}; do
      echo "COPY --from=iondv-git-$temp /var/www/applications ."                              >> "$frameworkPath/Dockerfile"
    done
    echo "WORKDIR /var/www/modules"                                                           >> "$frameworkPath/Dockerfile"
    for temp in ${modulesDepPairList[@]}; do
     echo "COPY --from=iondv-git-$temp /var/www/modules ."                                    >> "$frameworkPath/Dockerfile"
    done
    echo "WORKDIR /var/www"                                                                   >> "$frameworkPath/Dockerfile"
    if [ $postInstScript ] ; then
      cp $postInstScript $frameworkPath/${postInstScript##*/}
      echo "COPY ./${postInstScript##*/} /var/www/${postInstScript##*/}"                      >> "$frameworkPath/Dockerfile"
      ### TODO If sript start other script? AND OTHER FILE???? ШАРИТЬ ПАПКУ www в текущую и в неё все копировать, в ней локально запустить? Или предварительно все файлы из контейнров собрать локально а потом после утилиты копировать в докер???
      # TODO Альтернатива - копировать все файлы в контейнер.
      echo "RUN sh /var/www/${postInstScript##*/}"                                            >> "$frameworkPath/Dockerfile"
      echo "RUN rm -f /var/www/${postInstScript##*/}"                                         >> "$frameworkPath/Dockerfile"
    fi
    #echo "LABEL new=1"                                                                        >> "$frameworkPath/Dockerfile"
    echo "ENV NODE_PATH /var/www"                                                             >> "$frameworkPath/Dockerfile"
    echo "RUN gulp build"                                                                     >> "$frameworkPath/Dockerfile"
    echo "RUN rm -r -f ./node_modules"                                                        >> "$frameworkPath/Dockerfile"
    echo "RUN npm ci --only=production"                                                       >> "$frameworkPath/Dockerfile" # TODO NPM uninstall dev
    echo
    echo "FROM node:10 as iondv-$appName"                                                     >>  "$frameworkPath/Dockerfile"
#    echo "FROM node:10-alpine"                                                                 >>  "$frameworkPath/Dockerfile"
#    echo "RUN  apk add --no-cache make g++ \
#         && apk add vips-dev fftw-dev build-base \
#            --update-cache \
#            --repository https://alpine.global.ssl.fastly.net/alpine/edge/community \
#            --repository https://alpine.global.ssl.fastly.net/alpine/edge/main \
#            rm -rf /var/lib/apt/lists/* && rm -fR /var/cache/apk/*"                           >> "$frameworkPath/Dockerfile"
    echo "WORKDIR /var/www"                                                                   >> "$frameworkPath/Dockerfile"
    echo "ENV NODE_PATH /var/www"                                                             >> "$frameworkPath/Dockerfile"
    echo "EXPOSE 8888"                                                                        >> "$frameworkPath/Dockerfile"
    if ! [ $skipTagMode ] ; then
      echo "LABEL version=\"$appGetVersion\""                                                 >> "$frameworkPath/Dockerfile"
    fi
    echo "COPY --from=iondv-base-$appName /var/www/ /var/www/"                                >> "$frameworkPath/Dockerfile"
    if [ $startCluster ] ; then
      echo "ENV WORKER_COUNT=$startCluster"                                                   >> "$frameworkPath/Dockerfile"
    fi
    echo "CMD [\"sh\", \"init.sh\"]"                                                          >> "$frameworkPath/Dockerfile"

    #TODO GET app version from package.json
    f_buld_docker_version "$imageName" "$frameworkPath/Dockerfile" "$frameworkPath/." "--check-ignore"
 else
   echo "Docker $imageName is exist, skip building"
 fi
}


##################################
# Git install function           #
##################################
function f_install_git () {
  if ! [ -d $frameworkPath ]; then
    if ! [ $quietMode ] ; then echo "Git: clone IONDV. framework"; fi
    git clone --quiet "$IONDVUrlGitFramework" "$appName"
    if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitFramework"; exit; fi
  else
    cd $frameworkPath
    if ! [ $quietMode ] ; then echo "Git: Stash and update IONDV. framework"; fi
    git stash
    git pull
  fi

  if ! [ -d "$frameworkPath/applications" ]; then
    mkdir "$frameworkPath/applications"
  fi

  if [ -d "$frameworkPath/applications/$appName" ]; then
    appVer=`grep -E '\"version\"\s*:\s*\"' $frameworkPath/applications/$appName/package.json | grep -o -E '[0-9\.]+'`
    git stash
    git pull
  else
    cd "$frameworkPath/applications"
    if ! [ $quietMode ] ; then echo "Git: clone IONDV. app - $appName from $appGitLink"; fi
    git clone --quiet "$appGitLink" $appName
    if [ $? -ne 0 ]; then echo "Didn't clone $appGitLink"; exit; fi
  fi


  if [ $appGetVersion ] ; then
    git checkout "tags/$appGetVersion"
    appVer=`grep -E '\"version\"\s*:\s*\"' $frameworkPath/applications/$appName/package.json | grep -o -E '[0-9\.]+'`
    if [[ $appGetVersion != $appVer ]] ; then
      echo "App version is different. Requred $appGetVersion, current $appVer."
      exit
    fi
  else
    appVer=`grep -E '\"version\"\s*:\s*\"' $frameworkPath/applications/$appName/package.json | grep -o -E '[0-9\.]+'`
  fi
  if ! [ $quietMode ] ; then echo "Preparing app version: $appVer"; fi

  # Change app name and namespace
  if [ $newAppName ] ; then
    cd $startDir
    $scriptPath/change-namespace.sh $quietMode "$frameworkPath/applications/$appName" $prevAppName $newAppName
  fi

  # package.json dependencies
  # engines - iondv framework version
  if ! [ $skipTagMode ] ; then f_get_framework_ver $frameworkPath/applications/$appName/package.json; fi
  if [ $frameworkVer ]; then
    if ! [ $quietMode ] ; then echo "Use ion engine: $i"; fi
    cd "$frameworkPath"
    git checkout tags/$frameworkVer
  fi

  # ionMetaDependencies
  f_get_metadep_ver $frameworkPath/applications/$appName/package.json
  for temp in ${metadepPairList[@]}; do
    if ! [ $quietMode ] ; then echo "Inslall ext-app: ${temp%:*}"; fi
    if ! [ -d "$frameworkPath/applications/${temp%:*}" ]; then
      cd $frameworkPath/applications
      git clone --quiet "$IONDVUrlGitExtApp/${temp%:*}.git"
      if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitExtApp/${temp%:*}.git"; exit; fi
    fi
    cd "$frameworkPath/applications/${temp%:*}"
    git stash
    git pull
    if ! [ $skipTagMode ] ; then git checkout "tags/${temp##*:}"; fi
  done

  if ! [ -d $frameworkPath/modules ]; then
    mkdir $frameworkPath/modules
  fi

  # ionModulesDependencies
  f_get_modulesdep_ver $frameworkPath/applications/$appName/package.json
  for temp in ${modulesDepPairList[@]}; do
    if ! [ $quietMode ] ; then echo "Install module: ${temp%:*}"; fi
    if ! [ -d "$frameworkPath/modules/${temp%:*}" ]; then
      cd $frameworkPath/modules
      git clone --quiet "$IONDVUrlGitModules/${temp%:*}.git"
      if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitModules/${temp%:*}.git"; exit; fi
    fi
    cd "$frameworkPath/modules/${temp%:*}"
    git stash
    git pull
    if ! [ $skipTagMode ] ; then git checkout "tags/${temp##*:}"; fi
  done

  if ! [ $quietMode ] ; then echo "Build IONDV application: $appName"; fi
  cd $frameworkPath
  export NODE_PATH=$frameworkPath

  f_create_setup_ini "/config"
  f_create_init_sh

  cd $frameworkPath
  if [ $postInstScript ] ; then
    if ! [ $quietMode ] ; then echo "Running postInstall script $postInstScript, before app build"; fi
    $postInstScript
  fi

  #npm -no-package-lock install gulp@"^4.0.0" gulp-clean-css@"~4.0.0" gulp-jsmin@"~0.1.5" gulp-less@"~4.0.1" gulp-rename@"~1.4.0"
  npm install

  gulp build
  if [ $? -ne 0 ]; then
    echo "Build app error. Exit"
    exit
  fi

  rm -r -f ./node_modules

  if ! [ $quietMode ] ; then echo 'Install npm production'; fi
  npm ci --only=production
  echo "Test user. Login: demo, password: ion-demo"
  if [ $dockerUse ]; then
    if ! [ $appGetVersion ] ; then appGetVersion="latest"; fi
    imageName="iondv-$appName:$appGetVersion"
    f_stop_docker
    f_dockerignore
    nodeVersion=`node --version | grep -Po "^v\d+" |  grep -Po "\d+"`
    echo "FROM node:$nodeVersion" > "$frameworkPath/Dockerfile"
    echo "WORKDIR /var/www" >> "$frameworkPath/Dockerfile"
    echo "EXPOSE 8888" >> "$frameworkPath/Dockerfile"
    echo "ENV NODE_PATH /var/www" >> "$frameworkPath/Dockerfile"
    echo "COPY . ." >> "$frameworkPath/Dockerfile"
    if [ $startCluster ] ; then echo "ENV WORKER_COUNT $startCluster" >> "$frameworkPath/Dockerfile"; fi
    echo "CMD [\"bash\", \"init.sh\"]" >> "$frameworkPath/Dockerfile"
    f_buld_docker_version "$imageName" "$frameworkPath/Dockerfile" "$frameworkPath/." "--check-ignore"
    f_start_docker
  else
    # TODO Remove database?
    bash ./init.sh
  fi
}

function f_stop_docker() {
  if ! [ $appGetVersion ] ; then appGetVersion="latest"; fi
  imageName="iondv-$appName:$appGetVersion"
  echo "Will be stop container and remove $dockerName, remove docker image: $imageName"
  echo "Also will be drop db: $dbName"
  if [ $yesToAll ] ; then
    choice="y"
  else
    read -p "Continue (y/n)?" choice
  fi
  case "$choice" in
    y|Y )
      docker stop $dockerName
      docker rm $dockerName
      docker image rmi $imageName
      docker exec -it $mongoLink mongo $dbName --quiet --eval "db.dropDatabase();";;
    n|N );;
    * ) echo "invalid";;
  esac
}

function f_start_docker() {
  if [ $mongoLink ] ; then
    if ! [ $quietMode ] ; then echo "Running docker container: $dockerName from $imageName, linked to $mongoLink"; fi
    docker run -d -p 8888:8888 --name $dockerName --link $mongoLink $imageName
  else   # TODO для докера нужен какой-то проброс портов на host. И параметр - запускать или нет.
    if ! [ $quietMode ] ; then echo "Running docker container: $dockerName from $imageName"; fi
    docker run -d -p 8888:8888 --name $dockerName $imageName
  fi
  sleep 60
  if ! [ $quietMode ] ; then docker logs $dockerName; fi
  curl localhost:8888 # TODO Check result - redirect to default from setup
  echo
  if [ $yesToAll ] ; then
    echo "Save docker container to file"
    choice="y"
  else
    read -p "\nSave docker container to file at $startDir (y/n)?" choice
  fi
  case "$choice" in
    y|Y )
      docker save $imageName -o $startDir/$dockerName.docker-image.tar
      echo "Save $startDir/$dockerName.docker-image.tar"
      ;;
    n|N );;
    * ) echo "invalid";;
  esac
}

##################################
# Docker install function        #
##################################
function f_install_docker() {
  echo "Create docker image: $imageName and run docker name:  $dockerName"
  # TODO get imageVer and remove dockerImage after git clone app. Maybe check docker image:ver before remove?
  f_stop_docker

  if ! [ -d $frameworkPath ]; then mkdir $frameworkPath; fi
  f_create_setup_ini
  f_create_init_sh
  f_dockerignore
  f_build_docker

  f_start_docker
}

##################################
# START SCRIPT                   #
##################################

# Process param and path
# Process param and path
startDir=`pwd`
scriptName=${0##*/}
if [ $scriptName = $0 ]; then
  scriptPath=$startDir
else
  scriptPath=${0%/$scriptName}
  scriptPath=`cd $scriptPath && pwd`
  cd $startDir
fi

while [ -n "$1" ]
do
case "$1" in
  -d) dockerUse=1; paramInfo="$paramInfo\nFound the build docker option";;
  -c) startCluster=$2; paramInfo="$paramInfo\nFound the cluster option"
  shift ;;
  -r) removeAppFolder=1; paramInfo="$paramInfo\nFound the remove current app folder option";;
  -k) skipCheck=1; paramInfo="$paramInfo\nFound the skip check option";;
  -i) importData=1; paramInfo="$paramInfo\nFound the import data option";;
  -a) importAcl=1; paramInfo="$paramInfo\nFound the import acl option";;
  -y) yesToAll=1; paramInfo="$paramInfo\nFound yes to all option";;
  -q) quietMode=1; paramInfo="$paramInfo\nFound the quiet data option";;
  -h) skipTagMode=1; paramInfo="$paramInfo\nFound the skip tag checkout option";;
  -v) dockerVersionSave=1; paramInfo="$paramInfo\nFound the save provisional docker image as template version option";;
  -l) mongoLink="$2"; paramInfo="$paramInfo\nFound the docker mongo link option"
  shift ;;
  -m) mongodbUri="$2"; paramInfo="$paramInfo\nFound the mongodb option"
  shift ;;
  -t) buildType="$2"; paramInfo="$paramInfo\nFound the type of build method option"
  shift ;;
  -n) newAppName="$2"; paramInfo="$paramInfo\nFound the new app name option"
  shift ;;
  -p) installDir="$2"; paramInfo="$paramInfo\nFound the path option"
  shift ;;
  -s) postInstScript="$2"; paramInfo="$paramInfo\nFound the script option"
  shift ;;
  *)  if [[ ${1:0:1} == "-" ]] ; then 
        echo "$1 is not an option" 
        shift
      else 
        appName="$1"
      fi;;
  esac
shift
done

if ! [ $appName ] ; then 
  echo "Didn't set application name or git url"
  exit
fi

# Default value
if ! [ $mongodbUri ] ; then  mongodbUri="localhost:27017"; fi
if ! [ $IONDVUrlGitFramework ] ; then IONDVUrlGitFramework=https://github.com/iondv/framework.git; fi
if ! [ $IONDVUrlGitModules ] ; then IONDVUrlGitModules=https://github.com/iondv; fi
if ! [ $IONDVUrlGitApp ] ; then IONDVUrlGitApp=https://github.com/iondv; fi
if ! [ $IONDVUrlGitExtApp ] ; then IONDVUrlGitExtApp=https://github.com/iondv; fi


checkUrl=`echo $appName  | grep "^http"`
if [ $? -eq 0 ]; then
  appGitLink=$appName
  appName=`echo $appName | grep -Po "[\-\w]+\.git" | sed 's/.git//'`
elif [[ $appName =~ "@" ]] ; then
  appGetVersion=${appName##*@}
  appName=${appName%@*}
  appGitLink=$IONDVUrlGitApp/$appName.git
else
  appGitLink=$IONDVUrlGitApp/$appName.git
fi

if [ $newAppName ] ; then
  if ! [ $appGitLink ] ; then appGitLink=$IONDVUrlGitApp/$appName.git ; fi
  prevAppName=$appName
  appName=$newAppName
fi

dbName=$appName

dockerName="$appName"

if ! [ $quietMode ] ; then
  echo -e "$paramInfo";
  echo "Framework URL: $IONDVUrlGitFramework"
  echo "Module base URL: $IONDVUrlGitModules"
  echo "App base URL: $IONDVUrlGitApp"
  echo "ExtApp base URL: $IONDVUrlGitExtApp"
  echo "App git link: $appGitLink"
  if [ $prevAppName ] ; then 
    echo "Changed namespace: $prevAppName" 
    echo "New app name and namespace: $appName" 
  else 
    echo "App name: $appName" 
  fi
  if [ $appGetVersion ] ; then echo "App version: $appGetVersion"; fi
fi

if [ $mongoLink ] ; then
  mongodbUri="$mongoLink:27017"
  if ! [ $quietMode ] ; then echo "Set mongo uri to $mongodbUri"; fi
fi

# Check
if ! [ $skipCheck ] ; then
  if ! [ $dockerUse ] ; then
    f_check_git
    f_check_node
    f_check_npm_dep
  fi
  f_check_mongo
  if ! [ $quietMode ] ; then echo 'Check success.'; fi
fi

# Set path
if ! [ $installDir ] ; then
  echo 'Use current dir for workspace'
  installDir=$startDir
fi
frameworkPath=$installDir/$appName

if [ $removeAppFolder ] ; then
  echo "Remove $frameworkPath"
  rm -r -f $frameworkPath
fi

if ! [ $quietMode ] ; then
  echo "Insalling app:          $appName"
  echo "  workspace dir:        $installDir"
  echo "  framework path:       $frameworkPath"
  if [ $postInstScript ] ; then echo "  postinstall script:   $postInstScript"; fi
fi
cd $installDir

# Build
if [ -z "$buildType" ]; then
  echo "Didn't set build method. Use default: git"
  f_install_git
else
  case "$buildType" in
    'docker') echo "Use docker build method"
        f_install_docker;;
    'git') echo "Use git build method"
        f_install_git;;
    *)  echo "Wrong build method: $buildType. Use default: git"
        f_install_git;;
  esac
fi


cd $startDir
