#!/bin/bash

# +TODO clean - remove current folder
# +TODO quiet - show only basic info
# +TODO set git path from enveronment
# +TODO check local node version and set docker node ver
# +TODO start cluster
# +TODO -y option: all yes
# +TODO bugfix import data
# +TODO CHECKOUT iondv engine
# +TODO Check appName in param
# +TODO check bash version > 3 (regexp)

# TODO change appName and namespace in all metadata
# TODO skip checkout - and also TODO set to default branch before
# TODO Checkout to app version (if not start http)
# TODO Simple get version with regexp in grep or bash(!)
# TODO Build in docker only, without use local Node.js
# TODO method git, zip, npm


if ! [ $1 ] ; then
  echo 'Usage: iondv-app [OPTION]... IONDV_APP_NAME_OR_GIT_URL'
  echo 'Install IONDV. Framework application to current dirrectory and create docker image.'
  echo
  echo 'Options:'
  echo '  -d                          stop, remove runnig app docker container and image,'
  echo '                              create and run new once'
  echo '  -c [value]                  start cluster with [value] count'
  echo '  -r                          remove app folder, if they exist'
  echo '  -i                          import data'
  echo '  -y                          yes to all'
  echo '  -k                          skip check'
  echo '  -q                          quiet mode. Show only major and warn information'
  echo '  -l [value]                  mongodb docker name, for link with app docker container'
  echo '                              (also set mongo uri value to [value]:27017)'
  echo '  -p [value]                  workspace path, where will created app folder'
  echo '  -s [value]                  script to run after install and before build app'
  echo '  -m [value]                  mongo uri, for example: mongodb:27017. Default localhost:27017'
  echo '  -n [value]                  new app namespace and name'
  echo
  echo 'Environment:'
  echo '  IONDVUrlGitFramework       URL for get framework, default: https://github.com/iondv/framework.git'
  echo '  IONDVUrlGitModules         Base of URL for get modules, default https://github.com/iondv'
  echo '  IONDVUrlGitApp             Base of URL for get app, default https://github.com/iondv'
  echo '  IONDVUrlGitExtApp          Base of URL for get app extension, default https://github.com/iondv'
  echo
  echo 'Example:'
  echo '  ./iondv-app -d -l mongodb khs-ticket-discount'
  echo '  ./iondv-app -m localhost:27017 https://github.com/akumidv/svyaz-info.git'
  exit
fi


# Process param
scriptPath=`echo $0 | sed 's/\/iondv-app//'`

while [ -n "$1" ]
do
case "$1" in
  -d) dockerUse=1; paramInfo="$paramInfo\nFound the docker option";;
  -c) startCluster=$2; paramInfo="$paramInfo\nFound the cluster option"
  shift ;;
  -r) removeAppFolder=1; paramInfo="$paramInfo\nFound the remove current app folder option";;
  -k) skipCheck=1; paramInfo="$paramInfo\nFound the skip check option";;
  -i) importData=1; paramInfo="$paramInfo\nFound the import data option";;
  -y) yesToAll=1; paramInfo="$paramInfo\nFound yes to all option";;
  -q) quietMode=1; paramInfo="$paramInfo\nFound the quiet data option";;
  -l) mongoLink="$2"; paramInfo="$paramInfo\nFound the docker mongo link option"
  shift ;;
  -m) mongodbUri="$2"; paramInfo="$paramInfo\nFound the mongodb option"
  shift ;;
  -n) newAppName="$2"; paramInfo="$paramInfo\nFound the new app name option"
  shift ;;
  -p) installDir="$2"; paramInfo="$paramInfo\nFound the path option"
  shift ;;
  -s) postInstScript="$2"; paramInfo="$paramInfo\nFound the script option"
  shift ;;
  *)  if [[ ${1:0:1} == "-" ]] ; then 
        echo "$1 is not an option" 
        shift
      else 
        appName="$1"
      fi;;
  esac
shift
done

$appName
if ! [ $appName ] ; then 
  echo "Didn't set application name or git url"
  exit
fi

#Default value
if ! [ $mongodbUri ] ; then  mongodbUri="localhost:27017"; fi
if ! [ $IONDVUrlGitFramework ] ; then IONDVUrlGitFramework=https://github.com/iondv/framework.git; fi
if ! [ $IONDVUrlGitModules ] ; then IONDVUrlGitModules=https://github.com/iondv; fi
if ! [ $IONDVUrlGitApp ] ; then IONDVUrlGitApp=https://github.com/iondv; fi
if ! [ $IONDVUrlGitExtApp ] ; then IONDVUrlGitExtApp=https://github.com/iondv; fi


if ! [ $quietMode ] ; then 
  echo -e "$paramInfo";
  echo "Framework URL: $IONDVUrlGitFramework"
  echo "Module base URL: $IONDVUrlGitModules"
  echo "App base URL: $IONDVUrlGitApp"
  echo "ExtApp base URL: $IONDVUrlGitExtApp"
fi

checkUrl=`echo $appName  | grep "^http"`
if [ $? -eq 0 ]; then
  appGitLink=$appName
  appName=`echo $appName | grep -Po "[\-\w]+\.git" | sed 's/.git//'`
else
  appGitLink=$IONDVUrlGitApp/$appName.git
fi

if [ $newAppName ] ; then
  appGitLink=$IONDVUrlGitApp/$appName.git
  prevAppName=$appName
  appName=$newAppName
fi

if [ $mongoLink ] ; then
  mongodbUri="$mongoLink:27017"
  if ! [ $quietMode ] ; then echo "Set mongo uri to $mongodbUri"; fi
fi

# Check
if ! [ $skipCheck ] ; then 
  # Bash
  bashVer=`bash --version`
  regexp='^GNU bash, version ([0-9]+)\.'
  if [[ $bashVer =~ $regexp ]] ; then
    if [ ${BASH_REMATCH[1]} -lt 3 ] ; then
      echo "Bash version less 3. Need 3 or hignter" 
      exit
      fi
  else 
    echo "Didn't check bash version. Need 3 or hignter"
  fi
  # Check git
  if ! [ $quietMode ] ; then echo 'Check environment: git, mongo, node, npm, node-gyp, gulp, bower'; fi
  git --version > /dev/null
  if [ $? -ne 0 ]; then
    echo "Error check git"
    exit
  fi
  # Check mongonpm -g list node-gyp gulp bower
  if [ $mongoLink ] ; then
    docker exec -it $mongoLink mongo --quiet --eval 'db.runCommand("ping").ok' > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check MongoDb docker container: $mongoLink"
      exit
    fi
  else
    checkMongo=`curl --silent $mongodbUri | grep "MongoDB"` > /dev/null
    if [ $? -ne 0 ]; then
      echo "Error check MongoDb: $mongodbUri"
    fi
  fi
  # Check node, npm, node-gyp, gulp, bower
  nodeCheck=`node --version`
  if [ $? -ne 0 ]; then
    echo "Error check node"
    exit
  fi
  nodeVersion=`echo $nodeCheck | grep -Po "^v\d+" |  grep -Po "\d+"`
  if ! [ $quietMode ] ; then echo "Node major version: $nodeVersion"; fi
  npmCheck=`npm --version`
  if [ $? -ne 0 ]; then
    echo "Error check npm "
    exit
  fi
  npmPackCheck=`npm -g list node-gyp gulp bower`
  if [ $? -ne 0 ]; then
    echo "Error check npm packages list"
    exit
  fi
  echo $npmPackCheck | grep 'node-gyp'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check node-gyp. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g node-gyp;;
      n|N ) echo "node-gyp is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'gulp@4.'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check ^gulp@4.0.0. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g gulp;;
      n|N ) echo "^gulp@4.0.0 is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  echo $npmPackCheck | grep 'bower'  > /dev/null
  if [ $? -ne 0 ]; then
    read -p "Error check bower. Install (y/n)?" choice
    case "$choice" in 
      y|Y ) npm install -g bower;;
      n|N ) echo "bower is requered" exit;;
      * ) echo "invalid"; exit;;
    esac
  fi
  if ! [ $quietMode ] ; then echo 'Success.'; fi
else 
  nodeCheck=`node --version`
  if [ $? -ne 0 ]; then
    echo "Error get local node version. Set default 10"
    nodeVersion="10"
  else 
    nodeVersion=`echo $nodeCheck | grep -Po "^v\d+" |  grep -Po "\d+"`
  fi
fi

startDir=`pwd`
dockerName=$appName
imageName=$dockerName
dbName=$appName
if ! [ $installDir ] ; then
  echo 'Use current dir for workspace'
  installDir=$startDir
fi
frameworkPath=$installDir/$appName


if [ $removeAppFolder ] ; then
  echo "Remove $frameworkPath"
  rm -r -f $frameworkPath
fi


if ! [ $quietMode ] ; then 
  echo "Insalling app:          $appName"
  echo "  workspace dir:        $installDir"
  echo "  framework path:       $frameworkPath"
  if [ $dockerUse ] ; then echo "  create docker image:  $imageName"; echo "  run docker name:      $dockerName"; fi
  if [ $postInstScript ] ; then echo "  postinstall script:   $postInstScript"; fi
fi

cd $installDir

if ! [ -d $frameworkPath ]; then
  if ! [ $quietMode ] ; then echo "Git: clone IONDV. framework"; fi
  git clone --quiet "$IONDVUrlGitFramework" "$appName"
  if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitFramework"; exit; fi
else
  cd $frameworkPath
  if ! [ $quietMode ] ; then echo "Git: Stash and update IONDV. framework"; fi
  git stash
  git pull
fi

if ! [ -d "$frameworkPath/applications" ]; then 
  mkdir "$frameworkPath/applications" 
fi

if [ -d "$frameworkPath/applications/$appName" ]; then
  appVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  if ! [ $quietMode ] ; then echo "Current app version: $appVer"; echo "Git: stash and update IONDV. app - $appName"; fi
  git stash
  git pull
else
  cd "$frameworkPath/applications"
  if ! [ $quietMode ] ; then echo "Git: clone IONDV. app - $appName from $appGitLink"; fi
  git clone --quiet "$appGitLink"
  if [ $? -ne 0 ]; then echo "Didn't clone $appGitLink"; exit; fi
  appVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  if ! [ $quietMode ] ; then echo "Current app version: $appVer"; fi
fi

# Change app name and namespace
if [ $newAppName ] ; then
  cd $startDir
  $scriptPath/change-namespace.sh $quietMode "$frameworkPath/applications/$appName" $prevAppName $newAppName
fi

if [ $dockerUse ] ; then  
  echo "Will be stop container and remove $dockerName, remove docker image: $imageName:latest and $imageName:$imageVer"
  echo "Also will be drop db: $dbName"
  if [ $yesToAll ] ; then
    choice="y"
  else
    read -p "Continue (y/n)?" choice
  fi
  case "$choice" in 
    y|Y ) 
      docker stop $dockerName
      docker rm $dockerName
      docker image rmi $imageName:latest
      docker image rmi $imageName:$imageVer
      docker exec -it $mongoLink mongo $dbName --quiet --eval "db.dropDatabase();";;
    n|N );;
    * ) echo "invalid";;
  esac
fi

# package.json dependencies 
IFS_def=$IFS
# engines - iondv framework version
grep '"engines"\s*:\s*{' $frameworkPath/applications/$appName/package.json > /dev/null # Check empty
if [ $? -eq 0 ]; then 
grep '"engines"\s*:\s*{[\s\n]*}' $frameworkPath/applications/$appName/package.json > /dev/null
fi
if [ $? -ne 0 ]; then
  engines=`sed -n -r '/"engines":\s+\{/,/\}/{ /"engines":\s+\{/d; /}/d; p; }' $frameworkPath/applications/$appName/package.json`
  if ! [ ${#engines[@]} = 0 ] ; then 
    if ! [ $quietMode ] ; then echo "Engine list: $engines"; fi
    enginelist=`echo $engines | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
    for i in ${enginelist[@]}
    do
      IFS=':' tmp=($i)
      if [ ${tmp[0]} = "ion" ]; then
        cd "$frameworkPath"
        git checkout tags/${tmp[1]}
        if ! [ $quietMode ] ; then echo "Use ion engine: $i"; fi
      fi
      IFS=$IFS_def
    done
  fi
fi

# ionMetaDependencies
grep '"ionMetaDependencies"\s*:\s*{' $frameworkPath/applications/$appName/package.json > /dev/null # Check empty
if [ $? -eq 0 ]; then
grep '"ionMetaDependencies"\s*:\s*{[\s\n]*}' $frameworkPath/applications/$appName/package.json > /dev/null
fi
if [ $? -ne 0 ]; then
  apps=`sed -n -r '/"ionMetaDependencies":\s+\{/,/\}/{ /"ionMetaDependencies":\s+\{/d; /}/d; p; }' $frameworkPath/applications/$appName/package.json`
  if ! [ ${#apps[@]} = 0 ] ; then 
    if ! [ $quietMode ] ; then echo "Addition apps list: $apps"; fi
    applist=`echo $apps | tr -d [:space:] | tr -d '"' | tr ',' '\n'`

    for i in ${applist[@]}
    do
      if ! [ $quietMode ] ; then echo "Inslall ext-app: $i"; fi
      IFS=':' tmp=($i)
      if ! [ -d "$frameworkPath/applications/${tmp[0]}" ]; then
        cd $frameworkPath/applications
        git clone --quiet "$IONDVUrlGitExtApp/${tmp[0]}.git"
        if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitExtApp/${tmp[0]}.git"; exit; fi
      fi
      cd "$frameworkPath/applications/${tmp[0]}"
      git stash
      git pull
      git checkout tags/${tmp[1]}
      IFS=$IFS_def
    done
  fi
fi

if ! [ -d $frameworkPath/modules ]; then 
  mkdir $frameworkPath/modules 
fi

# ionModulesDependencies
grep '"ionModulesDependencies"\s*:\s*{' $frameworkPath/applications/$appName/package.json > /dev/null # Check empty
if [ $? -eq 0 ]; then 
grep '"ionModulesDependencies"\s*:\s*{[\s\n]*}' $frameworkPath/applications/$appName/package.json > /dev/null
fi
if [ $? -ne 0 ]; then
  modules=`sed -n -r '/"ionModulesDependencies":\s+\{/,/\}/{ /"ionModulesDependencies":\s+\{/d; /}/d; p; }' $frameworkPath/applications/$appName/package.json`
  echo Modules list: $modules
  if ! [ ${#modules[@]} = 0 ] ; then
    modlist=`echo $modules | tr -d [:space:] | tr -d '"' | tr ',' '\n'`
    for i in ${modlist[@]}
    do
      if ! [ $quietMode ] ; then echo "Inslall module: $i"; fi
      IFS=':' tmp=($i)
      if ! [ -d "$frameworkPath/modules/${tmp[0]}" ]; then
        cd $frameworkPath/modules
        if ! [ $quietMode ] ; then echo `pwd`; echo $gitModules/${tmp[0]}.git; fi
        git clone --quiet "$IONDVUrlGitModules/${tmp[0]}.git"
        if [ $? -ne 0 ]; then echo "Didn't clone $IONDVUrlGitModules/${tmp[0]}.git"; exit; fi
      fi
      cd "$frameworkPath/modules/${tmp[0]}"
      git stash
      git pull
      git checkout tags/${tmp[1]}
      IFS=$IFS_def
    done
  fi
fi

if ! [ $quietMode ] ; then echo "Build IONDV application: $appName"; fi
cd $frameworkPath
export NODE_PATH=$frameworkPath

echo "auth.denyTop=false" > "$frameworkPath/config/setup.ini"
echo "auth.registration=false" >> "$frameworkPath//config/setup.ini"
echo "db.uri=mongodb://$mongodbUri/$appName" >> "$frameworkPath/config/setup.ini"
echo "server.ports[]=8888" >> "$frameworkPath/config/setup.ini"
echo "module.default=registry" >> "$frameworkPath/config/setup.ini"
echo "fs.storageRoot=./files" >> "$frameworkPath/config/setup.ini"
echo "fs.urlBase=/files" >> "$frameworkPath/config/setup.ini"
echo "deploy.mode=db" >> "$frameworkPath/config/setup.ini"

echo "node bin/import --src ./applications/$appName --ns $appName" > "$frameworkPath/init.sh"
echo "node bin/setup $appName --reset" >> "$frameworkPath/init.sh"
for i in ${applist[@]}
do
  IFS=':' tmp=($i)
  if ! [ -d "$frameworkPath/applications/${tmp[0]}" ]; then
    echo "node bin/setup ${tmp[0]}" >> "$frameworkPath/init.sh"
  fi
done
if [ $importData ] ; then echo "node bin/import-data --src ./applications/$appName/data --ns $appName" >> "$frameworkPath/init.sh"; fi
echo "node bin/adduser --name demo --pwd ion-demo" >> "$frameworkPath/init.sh"
echo "node bin/acl --u demo@local --role admin --p full" >> "$frameworkPath/init.sh"
if [ $startCluster ] ; then
  echo "export WORKER_COUNT=$startCluster" >> "$frameworkPath/init.sh"
  echo "node bin/cluster" >> "$frameworkPath/init.sh"
else
  echo "node bin/www" >> "$frameworkPath/init.sh"
fi

if [ $dockerUse ] ; then
  echo "FROM node:$nodeVersion" > "$frameworkPath/Dockerfile"
  echo "WORKDIR /var/www" >> "$frameworkPath/Dockerfile"
  echo "COPY . ." >> "$frameworkPath/Dockerfile"
  echo "EXPOSE 8888" >> "$frameworkPath/Dockerfile"
  echo "ENV NODE_PATH /var/www" >> "$frameworkPath/Dockerfile"
  if [ $startCluster ] ; then echo "ENV WORKER_COUNT $startCluster" >> "$frameworkPath/Dockerfile"; fi
  echo "CMD [\"bash\", \"init.sh\"]" >> "$frameworkPath/Dockerfile"

  echo "**/.eslintrc.yml" > "$frameworkPath/.dockerignore"
  echo -e ".eslinignore\n.editorconfig\n.tern-project" >> "$frameworkPath/.dockerignore"
  echo -e ".gitignore\n.git/**\n**/.git/**" >> "$frameworkPath/.dockerignore"
  echo -e ".npmignore\n**/package-lock.json" >> "$frameworkPath/.dockerignore"
  echo -e "/config/config.json.devel\n/config/config.json.prod\n/config/setup.ini.example" >> "$frameworkPath/.dockerignore"
  echo -e "/docs/**\n**/docs/**\n/changelog*" >> "$frameworkPath/.dockerignore"
  echo -e "/log/**\n/test/**" >> "$frameworkPath/.dockerignore"
  echo -e "/view/default/vendor" >> "$frameworkPath/.dockerignore"
  echo -e "/view/default/node_modules" >> "$frameworkPath/.dockerignore"
  echo -e "/modules/*/view/default/vendor/**" >> "$frameworkPath/.dockerignore"
  echo -e "/modules/*/view/default/node_modules/**" >> "$frameworkPath/.dockerignore"
  echo -e "/applications/*/themes/*/vendor/**" >> "$frameworkPath/.dockerignore"
  echo -e "/applications/*/themes/*/node_modules/**" >> "$frameworkPath/.dockerignore"
fi


if [ $postInstScript ] ; then
  if ! [ $quietMode ] ; then echo "Running postInstall script $postInstScript, before app build"; fi
  $postInstScript
fi

#npm -no-package-lock install gulp@"^4.0.0" gulp-clean-css@"~4.0.0" gulp-jsmin@"~0.1.5" gulp-less@"~4.0.1" gulp-rename@"~1.4.0"
npm install

gulp build
if [ $? -ne 0 ]; then
  echo "Build app error. Exit"
  exit
fi

rm -r -f ./node_modules

if ! [ $quietMode ] ; then echo 'Install npm production'; fi
npm ci --only=production


if ! [ $dockerUse ] ; then
  echo "Test user. Login: demo, password: ion-demo"
  bash ./init.sh
else
  imageVer=`grep "version" $frameworkPath/applications/$appName/package.json | sed 's/"version\"://' | sed 's/"//g' | sed 's/,//g' | sed 's/ //g'`
  if ! [ $quietMode ] ; then echo "Build docker version: $imageVer"; fi
  cd $frameworkPath
  docker image build -t $imageName:$imageVer .
  cd ..
  docker tag $imageName:$imageVer $imageName:latest
  if ! [ $quietMode ] ; then echo "Build docker image: $imageName:$imageVer and $imageName:latest"; fi
  if [ $mongoLink ] ; then
    if ! [ $quietMode ] ; then echo "Running docker container: $dockerName, linked to $mongoLink"; fi
    docker run -d -p 8888:8888 --name $dockerName --link $mongoLink $imageName
  else   # TODO для докера нужен какой-то проброс портов на host. И параметр - запускать или нет.
    if ! [ $quietMode ] ; then echo "Running docker container: $dockerName"; fi
    docker run -d -p 8888:8888 --name $dockerName $imageName 
  fi
  sleep 30
  if ! [ $quietMode ] ; then docker logs $dockerName; fi
  curl localhost:8888 # TODO проверка результата
  if [ $yesToAll ] ; then
    echo "Save docker container to file"
    choice="y"
  else
    read -p "Save docker container to file (y/n)?" choice
  fi
  case "$choice" in
    y|Y ) 
      docker save $imageName:latest -o $dockerName.docker-image.tar;;
    n|N );;
    * ) echo "invalid";;
  esac
fi

cd $startDir